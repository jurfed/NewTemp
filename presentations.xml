<queues xmlns="http://www.atsisa.com/gox/framework/action"
        xmlns:r="http://www.atsisa.com/gox/reels/action"
        xmlns:e="http://www.atsisa.com/gox/reels/extended/symbol/action"
        xmlns:f="http://www.atsisa.com/gox/reels/free/games/action"
        xmlns:b="http://www.atsisa.com/game/queencleopatra/action"
        xmlns:occore="http://www.atsisa.com/gox/games/common/action"
        xmlns:R="http://www.atsisa.com/gox/reels/action">

    <queue name="InitializeGame">
        <actions>
            <r:SendInitRequest/>
            <FadeInScreen screenId="fadeScreen" timeSpan="250"/>
        </actions>
    </queue>

    <queue name="OnError">
        <actions>
            <StopAllSounds/>
            <UpdateScreen screenId="baseGameScreen" method="pause"/>
            <UpdateScreen screenId="gamblerScreen" method="pause"/>
            <!--<UpdateScreen screenId="infoScreen" method="pause"/>-->
            <ShowScreen screenId="errorScreen"/>
        </actions>
    </queue>

    <queue name="ResetGame">
        <actions>
            <r:SendInitRequest/>
        </actions>
    </queue>

    <queue name="Clear">
        <actions>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <!--<b:Startlisteninglanguage/>-->
            <b:InitHandlingLogoMovies/>     <!--!!!!!!!!!!!-->
            <b:SetConfigurationWinLineView/>
            <!--<b:SetReelsSpeen/>-->
            <r:StopAutoPlay/>
            <FadeInScreen screenId="fadeScreen" timeSpan="250"/>
            <UpdateScreen screenId="baseGameScreen" method="reset"/>
            <r:UpdatePresentation state="Idle"/>
            <UpdateScreen screenId="winLinesScreen" method="reset"/>
            <UpdateScreen screenId="gamblerScreen" method="reset"/>
            <!--<UpdateScreen screenId="infoScreen" method="reset"/>-->
            <r:HideWinningLines/>
            <r:StopAnimationWinningSymbols/>
            <HideScreen screenId="gamblerScreen">
                <animation>
                    <destinationX>1920</destinationX>
                    <timeSpan>0</timeSpan>
                </animation>
            </HideScreen>
            <HideScreen screenId="infoScreen"/>
            <HideScreen screenId="errorScreen"/>
        </actions>
    </queue>

    <queue name="GameStart">
        <actions>
            <r:UpdatePresentation state="GameStart"/>
            <ExecuteNow queueName="Clear"/>
            <r:DisplayStoppedSymbols/>
            <ShowScreen screenId="baseGameScreen"/>
            <ShowScreen screenId="payTableScreen"/>
            <ShowScreen screenId="controlPanelScreen"/>
            <ShowScreen screenId="winLinesScreen"/>
            <r:UpdateMessageArea message="{#LangPlaceYourBet}" messageType="BOTTOM_PANEL"/>
            <r:UpdatePresentation state="Idle"/>
            <!--<ExecuteNow queueName="HideFeatureBackground"/>-->
            <FadeOutScreen screenId="fadeScreen" timeSpan="250"/>
        </actions>
    </queue>

    <queue name="SpinReels">
        <actions>
            <!--<b:HideFreeGamesWonPanel/>-->
            <b:StopSplashScreenVideo/>
            <r:UpdatePresentation state="RunningReels"/>
            <UpdateScreen screenId="infoScreen" method="reset"/>
            <r:SpinReels/>
            <r:AutoPlayBundle expectAutoPlayOn="true">
                <Pause pauseTime="200"/>
            </r:AutoPlayBundle>
            <r:UpdateMessageArea message="{#SimpleLangGoodLuck}" messageType="BOTTOM_PANEL"/>
            <r:AutoPlayBundle expectAutoPlayOn="false">
                <PlaySound soundId="reelstartIllinois"/>
                <b:StartSoundSpeenReelBaseGame/>
            </r:AutoPlayBundle>
            <StartTimer timerName="spin" duration="0"/>
            <InsertQueue name="SendBetRequest"/>
            <b:FindStoppedSymbols/>
        </actions>
    </queue>

    <queue name="BaseGameLimit">
        <actions>
            <r:UpdatePresentation state="StoppingReels"/>
            <Bundle>
                <WaitForTimer timerName="spin"/>
                <r:StopReels/>
            </Bundle>
            <r:StopReels forceStop="true"/>
            <b:StopSoundSpeenReelBaseGame/>
            <!--<PauseSound soundId="ReelSpinMelody"/>-->
            <r:StartAnimationWinningSymbols/>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <r:UpdatePresentation state="ReelsWinAnimation"/>
            <r:WinningLinesBundle>
                <r:ShowNextWinningLine/>
                <occore:ShowLinesPays/>
                <!--<r:UpdateMessageArea message="{#LangLineXPays}" messageType="BOTTOM_PANEL"/>-->
                <r:PlayCurrentWinningLineSound/>
            </r:WinningLinesBundle>
            <r:ShowNextWinningLine/>
            <PlaySound soundId="WinCountStop"/>
            <ExecuteNext queueName="TakeWin"/>
        </actions>
    </queue>

    <queue name="BaseGameLose">
        <actions>
            <r:UpdatePresentation state="StoppingReels"/>
            <Bundle>
                <WaitForTimer timerName="spin"/>
                <r:StopReels/>
            </Bundle>
            <r:UpdatePresentation state="GameLose"/>
            <r:StopReels forceStop="true"/>
            <!--<PauseSound soundId="ReelSpinMelody"/>-->
            <b:StopSoundSpeenReelBaseGame/>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <r:AutoPlayBundle expectAutoPlayOn="false">
                <r:UpdateMessageArea message="{#LangGameOver} - {#LangPlaceYourBet}" messageType="BOTTOM_PANEL"/>
            </r:AutoPlayBundle>
            <r:AutoPlayBundle expectAutoPlayOn="true">
                <r:UpdateMessageArea message="{#LangGameOver}" messageType="BOTTOM_PANEL"/>
            </r:AutoPlayBundle>
            <r:UpdatePresentation state="Idle"/>
            <InsertQueue name="ExecuteNextDependingOnAutoPlaySpin"/>
        </actions>
    </queue>

    <queue name="BaseGameWin">
        <actions>
            <r:UpdatePresentation state="StoppingReels"/>
            <Bundle>
                <WaitForTimer timerName="spin"/>
                <r:StopReels/>
            </Bundle>
            <b:StopSoundSpeenReelBaseGame/>
            <r:UpdatePresentation state="None"/>
            <r:StopReels forceStop="true"/>
            <b:StopSoundSpeenReelBaseGame/>
            <!--<b:SimpleCollect skip="true"/>-->
            <b:ExecuteNextDependingOnBigWin queueName="BaseGameBigWin"/>
            <r:StartAnimationWinningSymbols/>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <r:UpdatePresentation state="ReelsWinAnimation"/>
            <!--            <b:InitCollect/>
                        <InsertQueue name="ShowWin"/>-->
            <!--START COLLECT-->

            <Bundle>
                <b:InitCollect/>
                <ParallelBundle finishCondition="ANY">
                    <LoopBundle>
                        <b:UpdateCollectAction2 target="winIndicator"/>
                        <Pause pauseTime="70"/>
                    </LoopBundle>
                    <r:WinningLinesBundle>
                        <r:ShowNextWinningLine/>
                        <occore:ShowLinesPays/>
                        <r:PlayCurrentWinningLineSound/>
                    </r:WinningLinesBundle>
                </ParallelBundle>
            </Bundle>
            <!--IF COLLECT DONE THEN SKIP THIS QUEUE-->
            <b:CheckShortCollect queueName="BaseGameWinShortCollect"/>

            <ParallelBundle finishCondition="ANY">
                <LoopBundle>
                    <b:UpdateCollectAction2 target="winIndicator"/>
                    <Pause pauseTime="70"/>
                </LoopBundle>

                <LoopBundle>
                    <r:ShowNextWinningLine/>
                    <occore:ShowLinesPays/>
                    <Pause pauseTime="1000"/>
                </LoopBundle>

                <Bundle>
                    <PlaySound soundId="collect_intro" blocking="true"/>
                    <PlaySound soundId="collect_loop" loop="true" blocking="true"/>
                </Bundle>

                <b:FinishCollect/>
            </ParallelBundle>

            <StopSound soundId="collect_intro"/>
            <StopSound soundId="collect_loop"/>
            <PlaySound soundId="collect_end"/>
            <occore:WinCountStop/>
            <!--FINISH COLLECT-->

            <r:UpdatePresentation state="OfferGambler"/>
            <r:ExecuteNextDependingOnAutoPlay queueName="TakeWin"/>
            <b:ExecuteNextDependingOnGambleOffAction queueName="TakeWin"/>
            <r:UpdateMessageArea message="{#LangGambleOrTakeWin}" messageType="BOTTOM_PANEL"/>
            <PlaySound soundId="GambleLoop" loop="true"/>
            <LoopBundle>
                <Pause pauseTime="1000"/>
                <r:ShowNextWinningLine/>
                <occore:ShowLinesPays/>
            </LoopBundle>
            <StopSound soundId="GambleLoop"/>
        </actions>
    </queue>

    <queue name="BaseGameBigWin">
        <actions>
            <occore:InitBigWinCollectAction/>
            <InsertQueue name="ShowWin"/>
            <!--START COLLECT-->
        </actions>
    </queue>


    <queue name="StartWinningAnimations">
        <actions>
            <r:StartAnimationWinningSymbols/>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <r:UpdatePresentation state="ReelsWinAnimation"/>
            <r:WinningLinesBundle>
                <r:ShowNextWinningLine/>
                <occore:ShowLinesPays/>
                <r:PlayCurrentWinningLineSound/>
            </r:WinningLinesBundle>

            <r:UpdatePresentation state="OfferGambler"/>
            <r:ExecuteNextDependingOnAutoPlay queueName="TakeWin"/>
            <b:ExecuteNextDependingOnGambleOffAction queueName="TakeWin"/>
            <r:UpdateMessageArea message="{#LangGambleOrTakeWin}" messageType="BOTTOM_PANEL"/>

            <PlaySound soundId="GambleLoop" loop="true"/>
            <LoopBundle>
                <Pause pauseTime="1000"/>
                <r:ShowNextWinningLine/>
                <occore:ShowLinesPays/>
            </LoopBundle>
            <StopSound soundId="GambleLoop"/>
        </actions>
    </queue>


    <queue name="BaseGameWinShortCollect">
        <actions>
            <occore:WinCountStop/>

            <r:UpdatePresentation state="OfferGambler"/>
            <r:ExecuteNextDependingOnAutoPlay queueName="TakeWin"/>
            <b:ExecuteNextDependingOnGambleOffAction queueName="TakeWin"/>
            <r:UpdateMessageArea message="{#LangGambleOrTakeWin}" messageType="BOTTOM_PANEL"/>
            <PlaySound soundId="GambleLoop" loop="true"/>
            <LoopBundle>
                <Pause pauseTime="1000"/>
                <r:ShowNextWinningLine/>
                <occore:ShowLinesPays/>
            </LoopBundle>
            <StopSound soundId="GambleLoop"/>
        </actions>
    </queue>


    <queue name="BaseGameWinNoSound">
        <actions>

        </actions>
    </queue>


    <queue name="RBaseGameWin">
        <actions>
            <InsertQueue name="InitResume"/>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <r:WinningLinesBundle>
                <r:ShowNextWinningLine/>
                <occore:ShowLinesPays/>
            </r:WinningLinesBundle>
            <r:StartAnimationWinningSymbols/>
            <r:UpdateMessageArea message="{#LangGambleOrTakeWin}" messageType="BOTTOM_PANEL"/>
            <r:UpdatePresentation state="OfferGambler"/>
            <PlaySound soundId="GambleLoop" loop="true"/>
            <FadeOutScreen screenId="fadeScreen" timeSpan="250"/>
            <LoopBundle>
                <r:ShowNextWinningLine/>
                <Pause pauseTime="1000"/>
            </LoopBundle>
            <StopSound soundId="GambleLoop"/>
        </actions>
    </queue>


    <queue name="TakeWin">
        <actions>

            <StopSound soundId="GambleLoop"/>
            <r:UpdatePresentation state="GameWin"/>
            <!--<r:SendTakeWinRequest/>-->
            <b:CustomSendTakeWinRequest/>
            <InsertQueue name="ClearFreeGamesState"/>
            <b:ReturnOriginalSymbolDepth/>
            <!--<b:ResetAllFreeGamesAmount/>-->
        </actions>
    </queue>

    <queue name="OfferGamblerTakeWin">
        <actions>

            <b:Ftemp2/>
            <r:StopAnimationWinningSymbols/>
            <r:HideWinningLines/>
            <r:UpdatePresentation state="WinCounting"/>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <!--<occore:TransferWin/>-->
            <b:TransferWinCustom/>
            <ParallelBundle finishCondition="ANY">
                <!--<PlaySound soundId="BalanceToWin" loop="true" blocking="true"/>-->
                <PlaySound soundId="BalanceToWin"/>
                <!--                <r:StartWinToBalanceAnimation singleStepDuration="100" skipSoundId="BalanceToWinSkip"/>
                                <LoopBundle>
                                    <Pause pauseTime="1000"/>
                                    <r:ShowNextWinningLine/>
                                </LoopBundle>-->
            </ParallelBundle>
            <!--<PlaySound soundId="WinCountStop"/>-->
            <r:HideWinningLines/>
            <r:UpdateMessageArea message="{#LangWinnerPaid}" messageType="BOTTOM_PANEL"/>
            <r:UpdatePresentation state="Idle"/>
            <InsertQueue name="ExecuteNextDependingOnAutoPlaySpin"/>
            <b:ReturnOriginalSymbolDepth/>
            <b:Ftemp2/>
        </actions>
    </queue>

    <queue name="SendBetRequest">
        <actions>
            <r:SendBetRequest/>
        </actions>
    </queue>

    <queue name="EnteringGambler" force="true">
        <actions>
            <r:UpdatePresentation state="EnteringGambler"/>
            <r:SendGambleRequest/>
        </actions>
    </queue>

    <queue name="EnterGambler">
        <actions>
            <InsertQueue name="ClearFreeGamesState"/>
            <r:UpdateMessageArea message="{#LangChooseBlackOrRedOrTakeWin}" messageType="BOTTOM_PANEL"/>
            <r:UpdateGamblerHistoryCards/>
            <PlaySound soundId="Shift"/>
            <r:UpdateGamblerScreen state="SHOWING"/>
            <ShowScreen screenId="gamblerScreen">
                <animation>
                    <destinationX>0</destinationX>
                    <timeSpan>500</timeSpan>
                </animation>
            </ShowScreen>
            <r:HideWinningLines/>
            <r:UpdateGamblerScreen state="SELECT_CARD"/>
            <r:UpdatePresentation state="Gambler"/>
            <!--<PlaySound soundId="DeckSound" loop="true"/>-->
            <LoopBundle>
                <ToggleViewVisibility layoutId="gamblerScreen" viewId="animationCard"/>
                <Pause pauseTime="100"/>
            </LoopBundle>
        </actions>
    </queue>

    <queue name="SelectedGamblerRedCard" force="true">
        <actions>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <r:UpdateGamblerScreen state="SELECTED_RED_CARD"/>
            <ParallelBundle finishCondition="ANY">
                <r:SendBetRedRequest/>
                <LoopBundle>
                    <ToggleViewVisibility layoutId="gamblerScreen" viewId="animationCard"/>
                    <Pause pauseTime="100"/>
                </LoopBundle>
            </ParallelBundle>
        </actions>
    </queue>

    <queue name="SelectedGamblerBlackCard" force="true">
        <actions>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <r:UpdateGamblerScreen state="SELECTED_BLACK_CARD"/>
            <ParallelBundle finishCondition="ANY">
                <r:SendBetBlackRequest/>
                <LoopBundle>
                    <ToggleViewVisibility layoutId="gamblerScreen" viewId="animationCard"/>
                    <Pause pauseTime="100"/>
                </LoopBundle>
            </ParallelBundle>
        </actions>
    </queue>

    <queue name="GamblerWin">
        <actions>
            <r:UpdatePresentation state="GamblerWin"/>
            <StopSound soundId="DeckSound"/>
            <StopSound soundId="cardsLoop"/>
            <r:UpdateMessageArea message="{#LangAstraWin}" messageType="BOTTOM_PANEL"/>
            <PlaySound soundId="doubleChoise"/>
            <ParallelBundle finishCondition="ALL">
                <r:ShowSelectedGamblerCard/>
                <!--<b:SimpleCollect gambler="true"/>-->
                <r:PlayGamblerFlipCardSound soundId="DoubleWin" minSoundPlayTime="900"/>
            </ParallelBundle>
            <Pause pauseTime="700"/>
            <ParallelBundle finishCondition="ALL">
                <b:GambleCollect/>
                <PlaySound soundId="double_collect" loop="true"/>
            </ParallelBundle>
            <StopSound soundId="double_collect"/>
            <PlaySound soundId="double_collect_end"/>

            <Pause pauseTime="1000"/>
            <ParallelBundle finishCondition="ALL">
                <r:UpdateGamblerHistoryCards/>
                <r:HideSelectedGamblerCard/>
            </ParallelBundle>
            <PlaySound soundId="DeckSound" loop="true"/>
            <PlaySound soundId="cardsLoop" loop="true"/>
            <r:UpdateGamblerScreen state="SELECT_CARD"/>
            <r:UpdateMessageArea message="{#LangChooseBlackOrRedOrTakeWin}" messageType="BOTTOM_PANEL"/>
            <r:UpdatePresentation state="Gambler"/>
            <!--<b:SimpleCollect skip="true"/>-->
            <LoopBundle>
                <ToggleViewVisibility layoutId="gamblerScreen" viewId="animationCard"/>
                <Pause pauseTime="100"/>
            </LoopBundle>
            <b:ReturnOriginalSymbolDepth/>
        </actions>
    </queue>

    <queue name="GamblerLose">
        <actions>
            <r:UpdatePresentation state="GamblerLose"/>
            <StopSound soundId="DeckSound"/>
            <StopSound soundId="cardsLoop"/>
            <r:UpdateMessageArea message="{#LangAstraLose}" messageType="BOTTOM_PANEL"/>
            <r:ShowSelectedGamblerCard/>
            <PlaySound soundId="doubleChoise"/>
            <Pause pauseTime="1000"/>
            <r:UpdateGamblerHistoryCards/>
            <r:StopAnimationWinningSymbols/>
            <Pause pauseTime="1000"/>
            <HideScreen screenId="gamblerScreen">
                <animation>
                    <destinationX>1920</destinationX>
                    <timeSpan>0</timeSpan>
                </animation>
            </HideScreen>
            <r:ResetGambler/>
            <r:UpdatePresentation state="GameLose"/>
            <r:UpdateMessageArea message="{#LangGameOver} - {#LangGambleCompleted} - {#LangPlaceYourBet}"
                                 messageType="BOTTOM_PANEL"/>
            <r:UpdatePresentation state="Idle"/>
            <!--<b:ResetAllFreeGamesAmount/>-->
            <b:ReturnOriginalSymbolDepth/>
        </actions>
    </queue>

    <queue name="GamblerLimit">
        <actions>
            <StopSound soundId="DeckSound"/>
            <StopSound soundId="cardsLoop"/>
            <r:UpdateMessageArea message="{#LangAstraWin}" messageType="BOTTOM_PANEL"/>
            <PlaySound soundId="doubleChoise"/>
            <ParallelBundle finishCondition="ALL">
                <r:ShowSelectedGamblerCard/>
                <r:PlayGamblerFlipCardSound soundId="DoubleWin" minSoundPlayTime="900"/>
            </ParallelBundle>
            <Pause pauseTime="1000"/>
            <HideScreen screenId="gamblerScreen">
                <animation>
                    <destinationX>1920</destinationX>
                    <timeSpan>0</timeSpan>
                </animation>
            </HideScreen>
            <r:ResetGambler/>
            <ParallelBundle finishCondition="ANY">
                <r:SendTakeWinRequest/>
                <LoopBundle>
                    <r:ShowNextWinningLine/>
                    <Pause pauseTime="1000"/>
                </LoopBundle>
            </ParallelBundle>
            <b:ReturnOriginalSymbolDepth/>
            <InsertQueue name="ExecuteNextDependingOnAutoPlaySpin"/>
        </actions>
    </queue>

    <queue name="GamblerTakeWin">
        <actions>
            <r:HideWinningLines/>
            <r:StopAnimationWinningSymbols/>
            <!--<r:StartAnimationWinningSymbols/>-->
            <StopSound soundId="DeckSound"/>
            <StopSound soundId="cardsLoop"/>
            <HideScreen screenId="gamblerScreen">
                <animation>
                    <destinationX>1920</destinationX>
                    <timeSpan>0</timeSpan>
                </animation>
            </HideScreen>
            <r:ResetGambler/>
            <r:UpdatePresentation state="WinCounting"/>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <!--<b:TransferWinCustom/>-->
            <b:TransferWinCustom/>

            <ParallelBundle finishCondition="ANY">
                <PlaySound soundId="sb_loop"/>
                <!--                <PlaySound soundId="BalanceToWin" loop="true" blocking="true"/>
                                <r:StartWinToBalanceAnimation singleStepDuration="100" skipSoundId="BalanceToWinSkip"/>
                                <LoopBundle>
                                    &lt;!&ndash;<r:ShowNextWinningLine/>&ndash;&gt;
                                    <Pause pauseTime="1000"/>
                                </LoopBundle>-->
            </ParallelBundle>
            <!--<PlaySound soundId="WinCountStop"/>-->
            <r:UpdateMessageArea message="{#LangWinnerPaid}" messageType="BOTTOM_PANEL"/>
            <r:UpdatePresentation state="Idle"/>
            <b:ReturnOriginalSymbolDepth/>
            <!--<b:ResetAllFreeGamesAmount/>-->
            <InsertQueue name="ExecuteNextDependingOnAutoPlaySpin"/>
        </actions>
    </queue>

    <queue name="ShowNextInfoScreen">
        <actions>
            <r:ShowInfoScreen screenId="infoScreen" playSound="true">
                <animation>
                    <destinationY>0</destinationY>
                    <timeSpan>0</timeSpan>
                </animation>
            </r:ShowInfoScreen>
        </actions>
    </queue>

    <queue name="ExecuteNextDependingOnAutoPlaySpin">
        <actions>
            <r:ExecuteNextDependingOnAutoPlay queueName="SpinReels"/>
        </actions>
    </queue>

    <!-- ****************** FREE GAMES ****************** -->
    <queue name="EnterFreeGames">
        <actions>
            <r:UpdatePresentation state="StoppingReels"/>
            <Bundle>
                <WaitForTimer timerName="spin"/>
                <r:StopReels/>
            </Bundle>
            <r:UpdatePresentation state="RunningReels"/>
            <r:StopReels forceStop="true"/>
            <b:StopSoundSpeenReelBaseGame/>
            <r:StartAnimationWinningSymbols/>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <r:UpdatePresentation state="ReelsWinAnimation"/>

            <!--START COLLECT-->
            <Bundle>
                <b:InitCollect/>
                <ParallelBundle finishCondition="ANY">
                    <LoopBundle>
                        <b:UpdateCollectAction2 target="winIndicator"/>
                        <Pause pauseTime="70"/>
                    </LoopBundle>
                    <r:WinningLinesBundle>
                        <r:ShowNextWinningLine/>
                        <occore:ShowLinesPays/>
                        <r:PlayCurrentWinningLineSound/>
                    </r:WinningLinesBundle>
                </ParallelBundle>
            </Bundle>
            <!--IF COLLECT DONE THEN SKIP THIS QUEUE-->
            <b:CheckShortCollect queueName="EnterFreeGamesShortCollect"/>

            <ParallelBundle finishCondition="ANY">
                <LoopBundle>
                    <b:UpdateCollectAction2 target="winIndicator"/>
                    <Pause pauseTime="70"/>
                </LoopBundle>

                <LoopBundle>
                    <r:ShowNextWinningLine/>
                    <occore:ShowLinesPays/>
                    <Pause pauseTime="1000"/>
                </LoopBundle>

                <Bundle>
                    <PlaySound soundId="collect_intro" blocking="true"/>
                    <PlaySound soundId="collect_loop" loop="true" blocking="true"/>
                </Bundle>

                <b:FinishCollect play="true"/>
            </ParallelBundle>

            <StopSound soundId="collect_intro"/>
            <StopSound soundId="collect_loop"/>
            <PlaySound soundId="collect_end"/>
            <occore:WinCountStop/>
            <b:InitAllFreeGamesAmount/>
            <!--FINISH COLLECT-->

            <ParallelBundle finishCondition="ALL">
                <b:ShowFreeGamesWonPanel/>
                <PlaySound soundId="showFreegamesPanel"/>
            </ParallelBundle>

            <ShowScreen screenId="enterFeatureBannerScreen"/>
            <PlaySound soundId="BookFlash"/>
            <Pause pauseTime="200"/>
            <PlaySound soundId="bookLoop" loop="true"/>
            <ChangeViewVisibility layoutId="enterFeatureBannerScreen" viewId="featureButton" visible="true"/>
            <r:HideWinningLines/>
            <!--<r:UpdateMessageArea message="{#LangBonusWon} - {#LangPressStartToBegin}" messageType="BOTTOM_PANEL"/>-->
            <r:ShowInfoScreen screenId="infoScreen" playSound="false" viewId="featureInfoScreen">
                <animation>
                    <destinationY>0</destinationY>
                    <timeSpan>400</timeSpan>
                </animation>
            </r:ShowInfoScreen>
            <b:ShowBgrFreeGames/>
            <b:FreeGamesMode isFreeGames="true"/>
            <r:StopAnimationWinningSymbols/>
            <r:UpdatePresentation state="EnterFreeGames"/>
            <r:ExecuteNextDependingOnAutoPlay queueName="StartExtendedSymbolAnimation"/>
        </actions>
    </queue>

    <queue name="EnterFreeGamesShortCollect">
        <actions>
            <occore:WinCountStop/>
            <b:InitAllFreeGamesAmount/>

            <ParallelBundle finishCondition="ALL">
                <b:ShowFreeGamesWonPanel/>
                <PlaySound soundId="showFreegamesPanel"/>
            </ParallelBundle>

            <ShowScreen screenId="enterFeatureBannerScreen"/>
            <PlaySound soundId="BookFlash"/>
            <Pause pauseTime="200"/>
            <PlaySound soundId="bookLoop" loop="true"/>
            <ChangeViewVisibility layoutId="enterFeatureBannerScreen" viewId="featureButton" visible="true"/>
            <r:HideWinningLines/>
            <!--<r:UpdateMessageArea message="{#LangBonusWon} - {#LangPressStartToBegin}" messageType="BOTTOM_PANEL"/>-->
            <r:ShowInfoScreen screenId="infoScreen" playSound="false" viewId="featureInfoScreen">
                <animation>
                    <destinationY>0</destinationY>
                    <timeSpan>400</timeSpan>
                </animation>
            </r:ShowInfoScreen>
            <b:ShowBgrFreeGames/>
            <b:FreeGamesMode isFreeGames="true"/>
            <r:StopAnimationWinningSymbols/>
            <r:UpdatePresentation state="EnterFreeGames"/>
            <r:ExecuteNextDependingOnAutoPlay queueName="StartExtendedSymbolAnimation"/>
        </actions>
    </queue>


    <queue name="StartExtendedSymbolAnimation">
        <actions>
            <StopSound soundId="bookLoop"/>
            <r:UpdatePresentation state="SelectingExtendedSymbol"/>
            <r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>
            <PlaySound soundId="BookOpen"/>
            <r:UpdatePresentation state="None"/>
            <b:StartSelectingExtendedSymbolAnimation/>
            <e:SelectExtendedSymbolRequest/>
            <ParallelBundle finishCondition="ANY">
                <b:ShowSelectedExtendedSymbol/>
                <LoopBundle>
                    <b:Bookpause/>
                    <PlaySound soundId="BookFlipPage1"/>
                    <b:Bookpause/>
                    <PlaySound soundId="BookFlipPage2"/>
                    <b:Bookpause/>
                    <PlaySound soundId="BookFlipPage3"/>
                    <b:Bookpause/>
                    <PlaySound soundId="BookFlipPage4"/>
                </LoopBundle>
            </ParallelBundle>
            <PlaySound soundId="BookFlipPage5"/>
            <b:HighlightSelectedExtendedSymbol/><!-- мигание рамки символа-->
            <r:UpdatePresentation state="SelectedExtendedSymbol"/>
        </actions>
    </queue>

    <queue name="StartFreeGame">
        <actions>
            <Pause pauseTime="100"/>
        </actions>
    </queue>

    <queue name="FreeGamesSpin">
        <actions>
            <b:FixFreeGamesCollect/>
            <b:SpinFlashPlay winLine="false"/>
            <r:UpdatePresentation state="FreeGamesRunningReels"/>
            <r:SpinReels/>
            <r:AutoPlayBundle expectAutoPlayOn="true">
                <Pause pauseTime="200"/>
            </r:AutoPlayBundle>
            <r:CleanWinningLines/>
            <StartTimer timerName="spin" duration="0"/>
            <f:SendNextFreeGameRequest/>
            <b:FindStoppedSymbols/>
        </actions>
    </queue>

    <queue name="FreeGameNext">
        <actions>
            <!--            <PauseSound soundId="FeatureBkg"/>
                        <PlaySound soundId="FeatureBkg" loop="true" volume="1"/>-->
            <r:UpdateMessageArea message="{#LangFreeSpin} - {#LangOf}" messageType="BOTTOM_PANEL"/>
            <InsertQueue name="FreeGamesPresentation"/>
            <InsertQueue name="FreeGamesSpin"/>
        </actions>
    </queue>


    <queue name="FreeGamesPresentation1">
        <actions>
            <r:UpdatePresentation state="FreeGamesStoppingReels"/>
            <Bundle>
                <WaitForTimer timerName="spin"/>
                <r:StopReels/>
            </Bundle>
            <r:UpdatePresentation state="None"/>
            <r:StopReels forceStop="true"/>
            <r:UpdatePresentation state="FreeGamesWinAnimation"/>

            <Bundle>
                <r:StartAnimationWinningSymbols/>

                <!--COLLECT START-->
                <b:InitFreeGameCollectAction/>
                <ParallelBundle finishCondition="ANY">
                    <LoopBundle>
                        <b:UpdateCollectAction2 target="winIndicator"/>
                        <Pause pauseTime="70"/>
                    </LoopBundle>
                    <r:WinningLinesBundle>
                        <r:StartAnimationWinningSymbols/>
                        <PauseSound soundId="FeatureBkg"/>
                        <PlaySound soundId="FeatureBkg" loop="true" volume="0.4"/>
                        <b:SpinFlashPlay winLine="true"/>
                        <r:ShowNextWinningLine/>
                        <occore:ShowLinesPays/>
                        <!--<r:UpdateMessageArea message="{#LangLineXPays}" messageType="BOTTOM_PANEL"/>-->
                        <r:PlayCurrentWinningLineSound/>
                        <Pause pauseTime="100"/>
                    </r:WinningLinesBundle>
                </ParallelBundle>
            </Bundle>
            <b:WinCountStopCustom/>

            <Pause pauseTime="100"/>
            <PauseSound soundId="FeatureBkg"/>
            <PlaySound soundId="FeatureBkg" loop="true" volume="1"/>
            <r:HideWinningLines/>
            <r:StopAnimationWinningSymbols/>
            <e:SwitchWinLines/>
            <b:ExecuteNextDependingOnEndFreeGames queueName="FreeGamesEnd"/>
        </actions>
    </queue>

    <queue name="FreeGamesPresentation2">
        <actions>
            <Bundle>
                <r:StartAnimationWinningSymbols/>
                <b:InitFreeGameCollectAction extended="true"/>
                <ParallelBundle finishCondition="ANY">
                    <LoopBundle>
                        <b:UpdateCollectAction2 target="winIndicator"/>
                        <Pause pauseTime="70"/>
                    </LoopBundle>
                    <r:WinningLinesBundle>
                        <r:StartAnimationWinningSymbols/>
                        <PauseSound soundId="FeatureBkg"/>
                        <PlaySound soundId="FeatureBkg" loop="true" volume="0.4"/>
                        <b:SpinFlashPlay winLine="true"/>
                        <Pause pauseTime="0"/>
                        <r:ShowNextWinningLine/>
                        <occore:ShowLinesPays/>
                        <!--<r:UpdateMessageArea message="{#LangLineXPays}" messageType="BOTTOM_PANEL"/>-->
                        <b:PlayCurrentWinningLineFreeSound/>
                    </r:WinningLinesBundle>
                </ParallelBundle>
            </Bundle>
            <b:WinCountStopCustom/>

            <PauseSound soundId="FeatureBkg"/>
            <PlaySound soundId="FeatureBkg" loop="true" volume="1"/>
            <r:HideWinningLines/>
            <!--<Pause pauseTime="100"/>-->
            <r:StopAnimationWinningSymbols/>
            <b:ExecuteNextDependingOnEndFreeGames queueName="FreeGamesEnd"/>
            <!--<Pause pauseTime="200"/>-->
        </actions>
    </queue>

    <queue name="FreeGamesPresentation">
        <actions>
            <!--<b:ExecuteNextDependingOnLoseFreeGame queueName="FreeGameLose"/>-->
            <r:UpdatePresentation state="FreeGamesStoppingReels"/>
            <Bundle>
                <WaitForTimer timerName="spin"/>
                <r:StopReels/>
            </Bundle>
            <r:UpdatePresentation state="None"/>
            <r:StopReels forceStop="true"/>
            <r:UpdatePresentation state="FreeGamesWinAnimation"/>

            <Bundle>
                <b:InitFreeGameCollectAction/>
                <ParallelBundle finishCondition="ANY">
                    <LoopBundle>
                        <b:UpdateCollectAction2 target="winIndicator"/>
                        <Pause pauseTime="70"/>
                    </LoopBundle>
                    <r:WinningLinesBundle>
                        <r:StartAnimationWinningSymbols/>
                        <PauseSound soundId="FeatureBkg"/>
                        <PlaySound soundId="FeatureBkg" loop="true" volume="0.4"/>
                        <b:SpinFlashPlay winLine="true"/>
                        <r:ShowNextWinningLine/>
                        <occore:ShowLinesPays/>
                        <r:PlayCurrentWinningLineSound/>
                        <Pause pauseTime="100"/>
                    </r:WinningLinesBundle>
                </ParallelBundle>
            </Bundle>

            <b:CheckShortCollectFreeGames queueName="FreeGamesCollect1"/>

            <ParallelBundle finishCondition="ANY">
                <LoopBundle>
                    <b:UpdateCollectAction2 target="winIndicator"/>
                    <Pause pauseTime="70"/>
                </LoopBundle>

                <LoopBundle>
                    <r:ShowNextWinningLine/>
                    <occore:ShowLinesPays/>
                    <Pause pauseTime="1000"/>
                </LoopBundle>

                <Bundle>
                    <PlaySound soundId="f_collect_intro"/>
                    <PlaySound soundId="f_collect_loop" loop="true" blocking="true"/>
                </Bundle>

                <b:FinishCollect play="true"/>
            </ParallelBundle>
            <StopSound soundId="f_collect_intro"/>
            <StopSound soundId="f_collect_loop"/>
            <PlaySound soundId="f_collect_end"/>
            <b:WinCountStopCustom/>


            <Pause pauseTime="100"/>
            <PauseSound soundId="FeatureBkg"/>
            <PlaySound soundId="FeatureBkg" loop="true" volume="1"/>
            <r:HideWinningLines/>
            <r:StopAnimationWinningSymbols/>
            <e:SwitchWinLines/>

            <r:StartAnimationWinningSymbols/>

            <Bundle>
                <b:InitFreeGameCollectAction extended="true"/>
                <ParallelBundle finishCondition="ANY">
                    <LoopBundle>
                        <b:UpdateCollectAction2 target="winIndicator"/>
                        <Pause pauseTime="70"/>
                    </LoopBundle>
                    <r:WinningLinesBundle>
                        <r:StartAnimationWinningSymbols/>
                        <PauseSound soundId="FeatureBkg"/>
                        <PlaySound soundId="FeatureBkg" loop="true" volume="0.4"/>
                        <b:SpinFlashPlay winLine="true"/>
                        <Pause pauseTime="0"/><!--Pause display of winning lines-->
                        <r:ShowNextWinningLine/>
                        <occore:ShowLinesPays/>
                        <!--<r:UpdateMessageArea message="{#LangLineXPays}" messageType="BOTTOM_PANEL"/>-->
                        <!--<r:PlayCurrentWinningLineSound/>-->
                        <b:PlayCurrentWinningLineFreeSound/>
                    </r:WinningLinesBundle>
                </ParallelBundle>
            </Bundle>

            <b:CheckShortCollectFreeGames queueName="FreeGamesCollect2"/>

            <ParallelBundle finishCondition="ANY">
                <LoopBundle>
                    <b:UpdateCollectAction2 target="winIndicator"/>
                    <Pause pauseTime="70"/>
                </LoopBundle>

                <LoopBundle>
                    <r:ShowNextWinningLine/>
                    <occore:ShowLinesPays/>
                    <Pause pauseTime="1000"/>
                </LoopBundle>

                <Bundle>
                    <PlaySound soundId="f_collect_intro"/>
                    <PlaySound soundId="f_collect_loop" loop="true" blocking="true"/>
                </Bundle>

                <b:FinishCollect play="true"/>
            </ParallelBundle>
            <StopSound soundId="f_collect_intro"/>
            <StopSound soundId="f_collect_loop"/>
            <PlaySound soundId="f_collect_end"/>

            <b:WinCountStopCustom/>

            <PauseSound soundId="FeatureBkg"/>
            <PlaySound soundId="FeatureBkg" loop="true" volume="1"/>
            <r:HideWinningLines/>
            <r:StopAnimationWinningSymbols/>
            <b:ExecuteNextDependingOnEndFreeGames queueName="FreeGamesEnd"/>
            <!--<Pause pauseTime="200"/>-->
        </actions>
    </queue>

    <queue name="FreeGamesCollect1">
        <actions>
            <b:WinCountStopCustom/>

            <Pause pauseTime="100"/>
            <PauseSound soundId="FeatureBkg"/>
            <PlaySound soundId="FeatureBkg" loop="true" volume="1"/>
            <r:HideWinningLines/>
            <r:StopAnimationWinningSymbols/>
            <e:SwitchWinLines/>
            <r:StartAnimationWinningSymbols/>


            <Bundle>
                <b:InitFreeGameCollectAction extended="true"/>
                <ParallelBundle finishCondition="ANY">
                    <LoopBundle>
                        <b:UpdateCollectAction2 target="winIndicator"/>
                        <Pause pauseTime="70"/>
                    </LoopBundle>
                    <r:WinningLinesBundle>
                        <r:StartAnimationWinningSymbols/>
                        <PauseSound soundId="FeatureBkg"/>
                        <PlaySound soundId="FeatureBkg" loop="true" volume="0.4"/>
                        <b:SpinFlashPlay winLine="true"/>
                        <Pause pauseTime="0"/><!--Pause display of winning lines-->
                        <r:ShowNextWinningLine/>
                        <occore:ShowLinesPays/>
                        <!--<r:UpdateMessageArea message="{#LangLineXPays}" messageType="BOTTOM_PANEL"/>-->
                        <!--<r:PlayCurrentWinningLineSound/>-->
                        <b:PlayCurrentWinningLineFreeSound/>
                    </r:WinningLinesBundle>
                </ParallelBundle>
            </Bundle>


            <b:CheckShortCollectFreeGames queueName="FreeGamesCollect2"/>

            <ParallelBundle finishCondition="ANY">
                <LoopBundle>
                    <b:UpdateCollectAction2 target="winIndicator"/>
                    <Pause pauseTime="70"/>
                </LoopBundle>

                <LoopBundle>
                    <r:ShowNextWinningLine/>
                    <occore:ShowLinesPays/>
                    <Pause pauseTime="1000"/>
                </LoopBundle>

                <Bundle>
                    <PlaySound soundId="f_collect_intro"/>
                    <PlaySound soundId="f_collect_loop" loop="true" blocking="true"/>
                </Bundle>

                <b:FinishCollect play="true"/>
            </ParallelBundle>
            <StopSound soundId="f_collect_intro"/>
            <StopSound soundId="f_collect_loop"/>
            <PlaySound soundId="f_collect_end"/>

            <b:WinCountStopCustom/>


            <PauseSound soundId="FeatureBkg"/>
            <PlaySound soundId="FeatureBkg" loop="true" volume="1"/>
            <r:HideWinningLines/>

            <r:StopAnimationWinningSymbols/>
            <b:ExecuteNextDependingOnEndFreeGames queueName="FreeGamesEnd"/>
            <ExecuteNext queueName="FreeGamesSpin"/>
            <!--<Pause pauseTime="200"/>-->
        </actions>
    </queue>

    <queue name="FreeGamesCollect2">
        <actions>
            <b:WinCountStopCustom/>

            <PauseSound soundId="FeatureBkg"/>
            <PlaySound soundId="FeatureBkg" loop="true" volume="1"/>
            <r:HideWinningLines/>

            <r:StopAnimationWinningSymbols/>
            <b:ExecuteNextDependingOnEndFreeGames queueName="FreeGamesEnd"/>
            <ExecuteNext queueName="FreeGamesSpin"/>
            <!--<Pause pauseTime="200"/>-->
        </actions>
    </queue>


    <queue name="FreeGamesRetrigger">
        <actions>
            <r:UpdateMessageArea message="{#LangFreeSpin} - {#LangOf}" messageType="BOTTOM_PANEL"/>
            <InsertQueue name="FreeGamesPresentation1"/>
            <!--<r:UpdateMessageArea message="" messageType="BOTTOM_PANEL"/>-->
            <ParallelBundle finishCondition="ALL">
                <b:ShowFreeGamesWonPanel/>
                <PlaySound soundId="showFreegamesPanel"/>
            </ParallelBundle>
            <ShowScreen screenId="freeGamesBannerScreen"/>
            <r:UpdatePresentation state="FreeGamesRetrigger"/>
            <Pause pauseTime="3000"/>
            <b:CustomShowHideScreen showScreen="false" animationTime="400" screenId="freeGamesBannerScreen"/>
            <InsertQueue name="FreeGamesPresentation2"/>
            <ExecuteNext queueName="FreeGamesSpin"/>
        </actions>
    </queue>


    <queue name="FreeGamesWin">
        <actions>
            <!--<b:Temp3/>-->
            <!--<r:UpdateMessageArea message="{#LangFreeGame} - {#LangOf}" messageType="BOTTOM_PANEL"/>-->
            <r:UpdateMessageArea message="{#LangFreeSpin} - {#LangOf}" messageType="BOTTOM_PANEL"/>
            <InsertQueue name="FreeGamesPresentation"/>


            <!--<r:UpdateMessageArea message="{#LangFreeGamesCompleted}" messageType="BOTTOM_PANEL"/>-->
            <ExecuteNow queueName="HideFeatureBackground"/>
            <StopSound soundId="FeatureBkg"/>

            <ParallelBundle finishCondition="ALL">
                <b:ShowFreeGamesWonPanel/>
                <PlaySound soundId="showFreegamesPanel"/>
            </ParallelBundle>

            <ShowScreen screenId="freeGamesBannerScreen"/>
            <Pause pauseTime="200"/>
            <r:DisplayStoppedSymbols/>
            <ParallelBundle finishCondition="ALL">
                <PlaySound soundId="FeatureEndBanner" blocking="false"/>
                <b:ReturnBackgroundForBaseGameMode/>
            </ParallelBundle>
            <b:MoveUpBackground/>
            <b:FreeGamesMode isFreeGames="false"/>
            <b:SetYForTombTextWin/>
            <e:ResetExtendedSymbol/>
            <Pause pauseTime="2500"/>
            <r:UpdatePresentation state="OfferGambler"/>
            <r:ExecuteNextDependingOnAutoPlay queueName="TakeWin"/>
            <b:ExecuteNextDependingOnGambleOffAction queueName="TakeWin"/>
            <r:UpdateMessageArea message="{#LangGambleOrTakeWin}" messageType="BOTTOM_PANEL"/>
            <b:SetYForTombTextWin/>
            <PlaySound soundId="GambleLoop" loop="true"/>

            <LoopBundle>
                <Pause pauseTime="1000"/>
                <!--<r:ShowNextWinningLine/>-->
            </LoopBundle>
            <StopSound soundId="GambleLoop"/>
        </actions>
    </queue>

    <queue name="FreeGamesEnd">
        <actions>
            <!--<b:Temp3/>-->
            <!--<r:UpdateMessageArea message="{#LangFreeGame} - {#LangOf}" messageType="BOTTOM_PANEL"/>-->
            <r:UpdateMessageArea message="{#LangFreeSpin} - {#LangOf}" messageType="BOTTOM_PANEL"/>
            <!--<InsertQueue name="FreeGamesPresentation"/>-->


            <!--            <r:UpdatePresentation state="FreeGamesStoppingReels"/>
                        <Bundle>
                            <WaitForTimer timerName="spin"/>
                            <r:StopReels/>
                        </Bundle>
                        <r:UpdatePresentation state="None"/>
                        <r:StopReels forceStop="true"/>-->


            <!--<r:UpdateMessageArea message="{#LangFreeGamesCompleted}" messageType="BOTTOM_PANEL"/>-->
            <ExecuteNow queueName="HideFeatureBackground"/>
            <StopSound soundId="FeatureBkg"/>

            <ParallelBundle finishCondition="ALL">
                <b:ShowFreeGamesWonPanel/>
                <PlaySound soundId="showFreegamesPanel"/>
            </ParallelBundle>

            <ShowScreen screenId="freeGamesBannerScreen"/>
            <Pause pauseTime="200"/>
            <r:DisplayStoppedSymbols/>
            <ParallelBundle finishCondition="ALL">
                <PlaySound soundId="FeatureEndBanner" blocking="false"/>
                <b:ReturnBackgroundForBaseGameMode/>
            </ParallelBundle>
            <b:MoveUpBackground/>
            <b:FreeGamesMode isFreeGames="false"/>
            <b:SetYForTombTextWin/>
            <e:ResetExtendedSymbol/>
            <Pause pauseTime="2500"/>
            <r:UpdatePresentation state="OfferGambler"/>
            <r:ExecuteNextDependingOnAutoPlay queueName="TakeWin"/>
            <b:ExecuteNextDependingOnGambleOffAction queueName="TakeWin"/>
            <r:UpdateMessageArea message="{#LangGambleOrTakeWin}" messageType="BOTTOM_PANEL"/>
            <b:SetYForTombTextWin/>
            <PlaySound soundId="GambleLoop" loop="true"/>

            <LoopBundle>
                <Pause pauseTime="1000"/>
                <!--<r:ShowNextWinningLine/>-->
            </LoopBundle>
            <StopSound soundId="GambleLoop"/>
        </actions>
    </queue>

    <!--<queue name="FreeGamesWin">
        <actions>
            <r:UpdateMessageArea message="{#LangFreeGame} - {#LangOf}" messageType="BOTTOM_PANEL"/>
            <InsertQueue name="FreeGamesPresentation"/>
            <r:UpdateMessageArea message="{#LangFreeGamesCompleted}" messageType="BOTTOM_PANEL"/>
            &lt;!&ndash;<ExecuteNow queueName="HideFeatureBackground"/>&ndash;&gt;
            &lt;!&ndash;<StopSound soundId="FeatureBkg"/>&ndash;&gt;

            &lt;!&ndash;<b:SetSkipEnable skip="false"/>&ndash;&gt;
            &lt;!&ndash;            <ParallelBundle finishCondition="ALL">
                            <b:ShowFreeGamesWonPanel/>
                            <b:SetSkipEnable skip="false"/>
                            <PlaySound soundId="showFreegamesPanel"/>
                        </ParallelBundle>&ndash;&gt;

            &lt;!&ndash;<ShowScreen screenId="freeGamesBannerScreen"/>&ndash;&gt;
            <Pause pauseTime="200"/>
            <r:DisplayStoppedSymbols/>
            &lt;!&ndash;<b:SetSkipEnable skip="false"/>&ndash;&gt;
            <ParallelBundle finishCondition="ALL">
                <PlaySound soundId="FeatureEndBanner" blocking="false"/>
                <b:ReturnBackgroundForBaseGameMode/>
            </ParallelBundle>
            &lt;!&ndash;<b:SetSkipEnable skip="false"/>&ndash;&gt;
            &lt;!&ndash;<b:MoveUpBackground/>&ndash;&gt;

            &lt;!&ndash;<b:FreeGamesMode isFreeGames="false"/>&ndash;&gt;
            &lt;!&ndash;<b:SetYForTombTextWin/>&ndash;&gt;
            &lt;!&ndash;<e:ResetExtendedSymbol/>&ndash;&gt;

            <r:UpdatePresentation state="OfferGambler"/>
            <r:ExecuteNextDependingOnAutoPlay queueName="TakeWin"/>
            &lt;!&ndash;<b:ExecuteNextDependingOnGambleOffAction queueName="TakeWin"/>&ndash;&gt;
            <r:UpdateMessageArea message="{#LangGambleOrTakeWin}" messageType="BOTTOM_PANEL"/>
            &lt;!&ndash;<b:SetYForTombTextWin/>&ndash;&gt;
            &lt;!&ndash;<PlaySound soundId="GambleLoop" loop="true"/>&ndash;&gt;

            <LoopBundle>
                <Pause pauseTime="1000"/>
                &lt;!&ndash;<r:ShowNextWinningLine/>&ndash;&gt;
            </LoopBundle>
            &lt;!&ndash;<StopSound soundId="GambleLoop"/>&ndash;&gt;
        </actions>
    </queue>-->

    <queue name="SpecialScatter">
        <actions>
            <r:HideWinningLines/>
            <r:StopAnimationWinningSymbols/>
            <Pause pauseTime="500"/>
            <b:HideSelectedExtendedSymbol/>
            <b:CustomShowHideScreen showScreen="false" animationTime="500" screenId="enterFeatureBannerScreen"/>
            <PlaySound soundId="FeatureBkg" loop="true"/>
            <b:SpinFlashPlay winLine="true"/>
            <HideScreen screenId="infoScreen">
                <animation>
                    <destinationY>-1200</destinationY>
                    <timeSpan>0</timeSpan>
                </animation>
            </HideScreen>
            <ExecuteNext queueName="FreeGamesSpin"/>
        </actions>
    </queue>

    <queue name="ClearFreeGamesState">
        <actions>
            <f:ResetFreeGames/>
            <!--            <b:SetSkipEnable skip="false"/>
                        <ParallelBundle finishCondition="ALL">
                            <b:CustomShowHideScreen showScreen="false" animationTime="400" screenId="freeGamesBannerScreen"/>
                            <b:CustomShowHideScreen showScreen="false" animationTime="400" screenId="enterFeatureBannerScreen"/>
                        </ParallelBundle>
                        <f:ResetFreeGames/>-->
        </actions>
    </queue>

    <queue name="FreeGamesLimit">
        <actions>
            <InsertQueue name="FreeGamesPresentation"/>
            <Pause pauseTime="500"/>
            <!--<r:UpdateMessageArea message="{#LangFreeGamesCompleted}" messageType="BOTTOM_PANEL"/>-->
            <ShowScreen screenId="freeGamesBannerScreen"/>
            <PlaySound soundId="FeatureEndBanner" blocking="true"/>
            <!--            <b:MoveUpBackground/>
                        <b:SetYForTombTextWin/>-->
            <e:ResetExtendedSymbol/>
            <r:DisplayStoppedSymbols/>
            <InsertQueue name="ClearFreeGamesState"/>
            <!--<ExecuteNow queueName="HideFeatureBackground"/>-->
            <!--<PlaySound soundId="collectEndFreegames"/>-->
            <ExecuteNext queueName="TakeWin"/>
        </actions>
    </queue>

    <queue name="HideFeatureBackground">
        <actions>
            <ChangeViewVisibility layoutId="reel_bg_free_game" viewId="oneColumn" visible="false"/>
            <ChangeViewVisibility layoutId="reel_bg_free_game" viewId="twoColumn" visible="false"/>
            <ChangeViewVisibility layoutId="reel_bg_free_game" viewId="threeColumn" visible="false"/>
            <ChangeViewVisibility layoutId="reel_bg_free_game" viewId="fourColumn" visible="false"/>
            <ChangeViewVisibility layoutId="reel_bg_free_game" viewId="fiveColumn" visible="false"/>
        </actions>
    </queue>

</queues>
